spring.application.name=order-service
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order_service
spring.datasource.username=root
spring.datasource.password=mysql
spring.jpa.hibernate.ddl-auto=update

server.port=0
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
eureka.instance.hostname=localhost

#monitor the status of circuit breakers (e.g., open or closed) and overall health.
management.health.circuitbreakers.enabled=true
#exposes all available management endpoints,for monitoring features.
management.endpoints.web.exposure.include=*
#health information is always shown when accessing the health endpoint.
management.endpoint.health.show-details=always


#Resilinece4j Properties

resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
#if 5 requests failed so the circuit state should be changed to "open"
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
#when 3 requests failed or successes the circuit state should be changed back to either "closed" or "open"
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true


#Resilience4J Timeout Properties
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

#Resilience4J Retry Properties

#we should try 3 attempts when the request is failed. the time between requests is 5 seconds
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

#Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
#the message in the kafka broker is a key-value pair, so here is the serialization operation for each key and value.
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.shophub.order_service.events.OrderPlacedEvent